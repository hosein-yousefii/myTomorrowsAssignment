name: Build Docker Image on Demand

on:
  workflow_dispatch:

env:
  IMAGE_NAME: ""
  CONTAINER_REPO: "mytomorrows/container"
  CHART_REPO: "mytomorrows/charts"
  REGISTRY_URL: "ghcr.io/hosein-yousefii"
  HELM_VERSION: "latest"
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Save Repository as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo-files
          path: . 

      - name: Set up Docker Buildx (BuildKit)
        uses: docker/setup-buildx-action@v3

      - name: Get the latest tag or create initial version
        id: tag
        run: |
          # Fetch all tags
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "none")
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV

      - name: Calculate the new version tag
        id: version
        run: |
          if [ "${{ env.LATEST_TAG }}" == "none" ]; then
            COMMIT_COUNT=$(git rev-list --count HEAD)
            NEW_TAG="v1.0.${COMMIT_COUNT}"
            echo "No tags found, starting with ${NEW_TAG}"
          else
            VERSION_PARTS=(${LATEST_TAG//./ })
            TAG_MAJOR_MINOR="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}"
            COMMITS_SINCE_TAG=$(git rev-list ${LATEST_TAG}..HEAD --count)
            NEW_TAG="${TAG_MAJOR_MINOR}.$((COMMITS_SINCE_TAG + 1))"
          fi
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
          echo "Calculated new tag: ${NEW_TAG}"

          # Save the version for the next job
          echo "${NEW_TAG}" > container_version.txt
          echo "Saving version as artifact..."

      - name: Upload Version Artifact
        uses: actions/upload-artifact@v4
        with:
          name: container_version
          path: container_version.txt

      - name: Determine Image Name
        id: image_name
        run: |
          # Use IMAGE_NAME if defined, otherwise use repo name
          if [ -z "${{ env.IMAGE_NAME }}" ]; then
            REPO_NAME="${GITHUB_REPOSITORY##*/}"
            IMAGE_NAME="${{ env.CONTAINER_REPO }}/$REPO_NAME"
          else
            IMAGE_NAME="${{ env.CONTAINER_REPO }}/${{ env.IMAGE_NAME }}"
          fi
          IMAGE_NAME=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "Using image name: ${IMAGE_NAME}"

      - name: Authenticate Container Registry (GHCR)
        run: |
          echo "${{ secrets.REGISTRYTOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build Docker Image and Push
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --progress=plain \
            --tag "${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ env.NEW_TAG }}" \
            --push \
            ./app

  package-helm:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Repository Artifact
        uses: actions/download-artifact@v4
        with:
          name: repo-files
          path: .

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Download Version Artifact
        uses: actions/download-artifact@v4
        with:
          name: container_version

      - name: Load Container Version
        run: |
          VERSION=$(cat container_version.txt)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Using container version: $VERSION"

      - name: Update Helm Chart Version
        run: |
          CHART_PATH="./app/charts/flask-config-app/Chart.yaml"          
          if [ ! -f "$CHART_PATH" ]; then
            echo "Error: Chart.yaml not found in $CHART_PATH"
            exit 1
          fi
          VERSION=$(cat container_version.txt)
          yq eval -i ".appVersion = \"${VERSION}\"" "$CHART_PATH"
          yq eval -i ".version = \"${VERSION}\"" "$CHART_PATH"
          echo "Updated Chart.yaml with appVersion=${VERSION} and version=${VERSION}"

      - name: Build Helm Dependencies
        run: |
          helm dependency build ./app/charts/flask-config-app

      - name: Package Helm Chart
        run: |
          helm package ./app/charts/flask-config-app --destination ./app/chart-packages

      - name: Push Helm Chart to GHCR
        run: |
          helm registry login ghcr.io -u $GITHUB_ACTOR --password ${{ secrets.REGISTRYTOKEN }}
          helm push ./app/chart-packages/*.tgz oci://${{ env.REGISTRY_URL }}/${{ env.CHART_REPO }}
